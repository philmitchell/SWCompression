#if !canImport(ObjectiveC)
import XCTest

extension BZip2CompressionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BZip2CompressionTests = [
        ("testBZip2CompressBytes", testBZip2CompressBytes),
        ("testBZip2CompressStrings", testBZip2CompressStrings),
        ("testWithAnswer1BZip2Compress", testWithAnswer1BZip2Compress),
        ("testWithAnswer2BZip2Compress", testWithAnswer2BZip2Compress),
        ("testWithAnswer3BZip2Compress", testWithAnswer3BZip2Compress),
        ("testWithAnswer4BZip2Compress", testWithAnswer4BZip2Compress),
        ("testWithAnswer5BZip2Compress", testWithAnswer5BZip2Compress),
        ("testWithAnswer6BZip2Compress", testWithAnswer6BZip2Compress),
        ("testWithAnswer8BZip2Compress", testWithAnswer8BZip2Compress),
        ("testWithAnswer9BZip2Compress", testWithAnswer9BZip2Compress),
    ]
}

extension BZip2Tests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BZip2Tests = [
        ("test1BZip2", test1BZip2),
        ("test2BZip2", test2BZip2),
        ("test3BZip2", test3BZip2),
        ("test4BZip2", test4BZip2),
        ("test5BZip2", test5BZip2),
        ("test6BZip2", test6BZip2),
        ("test7BZip2", test7BZip2),
        ("test8BZip2", test8BZip2),
        ("test9BZip2", test9BZip2),
        ("testBadFile_invalid", testBadFile_invalid),
        ("testBadFile_short", testBadFile_short),
        ("testChecksumMismatch", testChecksumMismatch),
        ("testEmptyData", testEmptyData),
        ("testNonStandardRunLength", testNonStandardRunLength),
    ]
}

extension DeflateCompressionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DeflateCompressionTests = [
        ("testDeflate1", testDeflate1),
        ("testDeflate2", testDeflate2),
        ("testDeflate3", testDeflate3),
        ("testDeflate4", testDeflate4),
        ("testDeflate5", testDeflate5),
        ("testDeflate6", testDeflate6),
        ("testDeflate7", testDeflate7),
        ("testDeflate8", testDeflate8),
        ("testDeflate9", testDeflate9),
        ("testDeflateCompressStrings", testDeflateCompressStrings),
        ("testTrickySequence", testTrickySequence),
    ]
}

extension GzipTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GzipTests = [
        ("testBadFile_invalid", testBadFile_invalid),
        ("testBadFile_short", testBadFile_short),
        ("testChecksumMismatch", testChecksumMismatch),
        ("testEmptyData", testEmptyData),
        ("testGzip1", testGzip1),
        ("testGzip2", testGzip2),
        ("testGzip3", testGzip3),
        ("testGzip4", testGzip4),
        ("testGzip5", testGzip5),
        ("testGzip6", testGzip6),
        ("testGzip7", testGzip7),
        ("testGzip8", testGzip8),
        ("testGzip9", testGzip9),
        ("testGzipArchive4", testGzipArchive4),
        ("testMultiUnarchive", testMultiUnarchive),
        ("testMultiUnarchiveChecksumMismatch", testMultiUnarchiveChecksumMismatch),
        ("testMultiUnarchiveRedundant", testMultiUnarchiveRedundant),
    ]
}

extension LZ4CompressionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LZ4CompressionTests = [
        ("testDictionary", testDictionary),
        ("testLZ4CompressBytes", testLZ4CompressBytes),
        ("testLZ4CompressStrings", testLZ4CompressStrings),
        ("testSmallDictionary", testSmallDictionary),
        ("testTrickySequence", testTrickySequence),
        ("testWithAnswer1LZ4Compress", testWithAnswer1LZ4Compress),
        ("testWithAnswer2LZ4Compress", testWithAnswer2LZ4Compress),
        ("testWithAnswer3LZ4Compress", testWithAnswer3LZ4Compress),
        ("testWithAnswer4LZ4Compress", testWithAnswer4LZ4Compress),
        ("testWithAnswer5LZ4Compress", testWithAnswer5LZ4Compress),
        ("testWithAnswer6LZ4Compress", testWithAnswer6LZ4Compress),
        ("testWithAnswer7LZ4Compress", testWithAnswer7LZ4Compress),
        ("testWithAnswer8LZ4Compress", testWithAnswer8LZ4Compress),
        ("testWithAnswer9LZ4Compress", testWithAnswer9LZ4Compress),
        ("testWithRandomOptions", testWithRandomOptions),
    ]
}

extension LZ4Tests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LZ4Tests = [
        ("test1LZ4", test1LZ4),
        ("test2LZ4", test2LZ4),
        ("test3LZ4", test3LZ4),
        ("test4LZ4", test4LZ4),
        ("test5LZ4", test5LZ4),
        ("test6LZ4", test6LZ4),
        ("test7LZ4", test7LZ4),
        ("test8LZ4", test8LZ4),
        ("test9LZ4", test9LZ4),
        ("testBadFile_invalid", testBadFile_invalid),
        ("testBadFile_short", testBadFile_short),
        ("testBlockSizes", testBlockSizes),
        ("testChecksumMismatch", testChecksumMismatch),
        ("testDependentBlocks", testDependentBlocks),
        ("testDictionary", testDictionary),
        ("testEmptyData", testEmptyData),
        ("testLegacyFrameMultipleBlocks", testLegacyFrameMultipleBlocks),
        ("testMultiFrameDecompress", testMultiFrameDecompress),
        ("testSkippableFrame", testSkippableFrame),
        ("testSmallDictionary", testSmallDictionary),
    ]
}

extension LzmaTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LzmaTests = [
        ("testBadFile_invalid", testBadFile_invalid),
        ("testBadFile_short", testBadFile_short),
        ("testEmptyData", testEmptyData),
        ("testLzma10", testLzma10),
        ("testLzma11", testLzma11),
        ("testLzma8", testLzma8),
        ("testLzma9", testLzma9),
        ("testLzmaEmpty", testLzmaEmpty),
    ]
}

extension SevenZipTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SevenZipTests = [
        ("test1", test1),
        ("test2", test2),
        ("test3", test3),
        ("test7zBZip2", test7zBZip2),
        ("test7zCopy", test7zCopy),
        ("test7zDeflate", test7zDeflate),
        ("test7zLZ4", test7zLZ4),
        ("testAllTimestamps", testAllTimestamps),
        ("testAntiFile", testAntiFile),
        ("testBadFile_invalid", testBadFile_invalid),
        ("testBadFile_short", testBadFile_short),
        ("testBigContainer", testBigContainer),
        ("testComplicatedCodingScheme", testComplicatedCodingScheme),
        ("testDeltaFilter", testDeltaFilter),
        ("testEmptyContainer", testEmptyContainer),
        ("testEmptyData", testEmptyData),
        ("testEmptyDirectory", testEmptyDirectory),
        ("testEmptyFile", testEmptyFile),
        ("testEncryptedHeader", testEncryptedHeader),
        ("testFormatMinorVersions", testFormatMinorVersions),
        ("testMultiBlocks", testMultiBlocks),
        ("testSingleThread", testSingleThread),
        ("testUnicode", testUnicode),
        ("testWinContainer", testWinContainer),
    ]
}

extension Sha256Tests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__Sha256Tests = [
        ("test1", test1),
        ("test2", test2),
        ("test3", test3),
        ("test4", test4),
        ("test5", test5),
        ("test6", test6),
        ("test7", test7),
    ]
}

extension TarCreateTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TarCreateTests = [
        ("test1", test1),
        ("test2", test2),
        ("testBigUid", testBigUid),
        ("testGnuBothLongNames", testGnuBothLongNames),
        ("testGnuLongLinkName", testGnuLongLinkName),
        ("testGnuLongName", testGnuLongName),
        ("testGnuTimes", testGnuTimes),
        ("testLongDirectoryName", testLongDirectoryName),
        ("testLongName", testLongName),
        ("testNegativeMtime", testNegativeMtime),
        ("testUnicode", testUnicode),
        ("testUstar", testUstar),
        ("testVeryLongName", testVeryLongName),
    ]
}

extension TarTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TarTests = [
        ("test", test),
        ("testBadFile_invalid", testBadFile_invalid),
        ("testBadFile_short", testBadFile_short),
        ("testBigContainer", testBigContainer),
        ("testBigNumField", testBigNumField),
        ("testEmptyContainer", testEmptyContainer),
        ("testEmptyDirectory", testEmptyDirectory),
        ("testEmptyFile", testEmptyFile),
        ("testFormats", testFormats),
        ("testGnuIncrementalFormat", testGnuIncrementalFormat),
        ("testLongNames", testLongNames),
        ("testNegativeMtime", testNegativeMtime),
        ("testOnlyDirectoryHeader", testOnlyDirectoryHeader),
        ("testPax", testPax),
        ("testUnicodePax", testUnicodePax),
        ("testUnicodeUstar", testUnicodeUstar),
        ("testWinContainer", testWinContainer),
    ]
}

extension XZTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__XZTests = [
        ("testBadFile_invalid", testBadFile_invalid),
        ("testBadFile_short", testBadFile_short),
        ("testChecksumMismatch", testChecksumMismatch),
        ("testDeltaFilter", testDeltaFilter),
        ("testMultiStreamChecksumMismatch", testMultiStreamChecksumMismatch),
        ("testMultiStreamComplexPadding", testMultiStreamComplexPadding),
        ("testMultiStreamNoPadding", testMultiStreamNoPadding),
        ("testSha256Check", testSha256Check),
        ("testXz1", testXz1),
        ("testXz2", testXz2),
        ("testXz3", testXz3),
        ("testXz4", testXz4),
        ("testXz5", testXz5),
        ("testXz6", testXz6),
        ("testXz7", testXz7),
        ("testXz8", testXz8),
        ("testXz9", testXz9),
    ]
}

extension XxHash32Tests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__XxHash32Tests = [
        ("test1", test1),
        ("test2", test2),
        ("test3", test3),
        ("test4", test4),
        ("test5", test5),
        ("test6", test6),
        ("test7", test7),
    ]
}

extension ZipTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ZipTests = [
        ("testBadCdExtTs", testBadCdExtTs),
        ("testBadFile_invalid", testBadFile_invalid),
        ("testBadFile_short", testBadFile_short),
        ("testBigContainer", testBigContainer),
        ("testChecksumMismatch", testChecksumMismatch),
        ("testDataDescriptor", testDataDescriptor),
        ("testDosLatinUS", testDosLatinUS),
        ("testEmptyContainer", testEmptyContainer),
        ("testEmptyData", testEmptyData),
        ("testEmptyDirectory", testEmptyDirectory),
        ("testEmptyFile", testEmptyFile),
        ("testUnicode", testUnicode),
        ("testWinContainer", testWinContainer),
        ("testZip64", testZip64),
        ("testZipBZip2", testZipBZip2),
        ("testZipCustomExtraField", testZipCustomExtraField),
        ("testZipLZMA", testZipLZMA),
    ]
}

extension ZlibTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ZlibTests = [
        ("testBadFile_invalid", testBadFile_invalid),
        ("testBadFile_short", testBadFile_short),
        ("testChecksumMismatch", testChecksumMismatch),
        ("testCreateZlib", testCreateZlib),
        ("testEmptyData", testEmptyData),
        ("testZlib", testZlib),
        ("testZlibEmpty", testZlibEmpty),
        ("testZlibFull", testZlibFull),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(BZip2CompressionTests.__allTests__BZip2CompressionTests),
        testCase(BZip2Tests.__allTests__BZip2Tests),
        testCase(DeflateCompressionTests.__allTests__DeflateCompressionTests),
        testCase(GzipTests.__allTests__GzipTests),
        testCase(LZ4CompressionTests.__allTests__LZ4CompressionTests),
        testCase(LZ4Tests.__allTests__LZ4Tests),
        testCase(LzmaTests.__allTests__LzmaTests),
        testCase(SevenZipTests.__allTests__SevenZipTests),
        testCase(Sha256Tests.__allTests__Sha256Tests),
        testCase(TarCreateTests.__allTests__TarCreateTests),
        testCase(TarTests.__allTests__TarTests),
        testCase(XZTests.__allTests__XZTests),
        testCase(XxHash32Tests.__allTests__XxHash32Tests),
        testCase(ZipTests.__allTests__ZipTests),
        testCase(ZlibTests.__allTests__ZlibTests),
    ]
}
#endif
