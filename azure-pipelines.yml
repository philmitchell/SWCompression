trigger:
  branches:
    exclude:
    - master
  tags:
    include:
    - '*'
    exclude:
    - '*-test*'

stages:
- stage: cache
  displayName: 'Cache Test Files'
  jobs:
  - job: cache
    pool:
      vmImage: 'macOS-10.15'
    variables:
      GIT_LFS_SKIP_SMUDGE: 1
      DEVELOPER_DIR: '/Applications/Xcode_11.3.1.app'
    steps:
    - script: |
        set -e -o xtrace
        brew update
        ./utils.py ci install-git-lfs-macos
        ls -a "Tests/Test Files"
      displayName: 'Install Git LFS'
    - script: |
        set -e -o xtrace
        git submodule update --init --recursive
        cp "Tests/Test Files/gitattributes-copy" "Tests/Test Files/.gitattributes"
      displayName: 'Update submodules'
    - script: |
        set -e -o xtrace
        cd "Tests/Test Files"
        git lfs ls-files -l | cut -d' ' -f1 | sort > ../../.assets-id
      displayName: 'Generate assets-id'
    - task: Cache@2
      inputs:
        key: '"swc_test_files_v3_" | .assets-id'
        path: '.git/modules/Tests/Test Files/lfs'
      displayName: 'Cache lfs of test files'
    - script: |
        set -e -o xtrace
        cd "Tests/Test Files"
        git lfs pull
        git lfs checkout
      displayName: 'Download or update test files'
- stage: test
  displayName: 'Build & Test'
  dependsOn: cache
  jobs:
  - job: macos
    strategy:
      matrix:
        macosSwift51:
          imageName: 'macOS-10.15'
          DEVELOPER_DIR: '/Applications/Xcode_11.3.1.app'
          WATCHOS_ACTIONS: 'clean build'
          WATCHOS_SIMULATOR: 'Apple Watch Series 4 - 44mm'
        macosSwift52:
          imageName: 'macOS-10.15'
          DEVELOPER_DIR: '/Applications/Xcode_11.4.1.app'
          WATCHOS_ACTIONS: 'clean build'
          WATCHOS_SIMULATOR: 'Apple Watch Series 4 - 44mm'
        macosSwift53:
          imageName: 'macOS-10.15'
          DEVELOPER_DIR: '/Applications/Xcode_12.4.app'
          WATCHOS_ACTIONS: 'clean build'
          WATCHOS_SIMULATOR: 'Apple Watch Series 4 - 44mm'
          UTILS_PW_XCF_FLAG: '--xcf'
        macosSwift54:
          imageName: 'macOS-11'
          DEVELOPER_DIR: '/Applications/Xcode_12.5.1.app'
          WATCHOS_ACTIONS: 'clean test'
          WATCHOS_SIMULATOR: 'Apple Watch Series 6 - 44mm'
          UTILS_PW_XCF_FLAG: '--xcf'
        macosSwift55:
          imageName: 'macOS-11'
          DEVELOPER_DIR: '/Applications/Xcode_13.1.app'
          WATCHOS_ACTIONS: 'clean test'
          WATCHOS_SIMULATOR: 'Apple Watch Series 6 - 44mm'
          UTILS_PW_XCF_FLAG: '--xcf'
    pool:
      vmImage: $(imageName)
    variables:
      GIT_LFS_SKIP_SMUDGE: 1
    steps:
    - script: |
        set -e -o xtrace
        brew update
        ./utils.py ci install-git-lfs-macos
        ls -a "Tests/Test Files"
      displayName: 'Install Git LFS'
    - script: |
        set -e -o xtrace
        git submodule update --init --recursive
        cp "Tests/Test Files/gitattributes-copy" "Tests/Test Files/.gitattributes"
      displayName: 'Update submodules'
    - script: |
        set -e -o xtrace
        cd "Tests/Test Files"
        git lfs ls-files -l | cut -d' ' -f1 | sort > ../../.assets-id
      displayName: 'Generate assets-id'
    - task: Cache@2
      inputs:
        key: '"swc_test_files_v3_" | .assets-id'
        path: '.git/modules/Tests/Test Files/lfs'
      displayName: 'Cache lfs of test files'
    - script: ./utils.py download-bbd-macos $UTILS_PW_XCF_FLAG
      displayName: 'Download BitByteData'
    - script: ./utils.py ci script-macos
      displayName: 'Build & Test'
    - script: swift build -c release
      displayName: 'Build SPM Release'
  - job: linux
    strategy:
      matrix:
        linuxSwift51:
          imageName: 'ubuntu-18.04'
          containerImage: 'swift:5.1.5-bionic'
        linuxSwift52:
          imageName: 'ubuntu-18.04'
          containerImage: 'swift:5.2.5-bionic'
        linuxSwift53:
          imageName: 'ubuntu-18.04'
          containerImage: 'swift:5.3.3-bionic'
        linuxSwift54:
          imageName: 'ubuntu-18.04'
          containerImage: 'swift:5.4.3-bionic'
        linuxSwift55:
          imageName: 'ubuntu-18.04'
          containerImage: 'swift:5.5.1-bionic'
    pool:
      vmImage: $(imageName)
    container: $[ variables['containerImage'] ]
    steps:
    - script: |
        set -e -o xtrace
        swift --version
        swift build
        swift build -c release # Check Release build just in case.
      displayName: 'Build SPM Debug & Release'
  - job: windows
    strategy:
      matrix:
        windowsSwift54:
          imageName: 'windows-2019'
          SWIFT_VERSION: '5.4.3'
        windowsSwift55:
          imageName: 'windows-2019'
          SWIFT_VERSION: '5.5.1'
    pool:
      vmImage: $(imageName)
    variables:
      DEVELOPER_DIR: 'C:\Library\Developer'
      SDKROOT: 'C:\Library\Developer\Platforms\Windows.platform\Developer\SDKs\Windows.sdk'
      XCTEST_DIR: 'C:\Library\Developer\Platforms\Windows.platform\Developer\Library\XCTest-development'
      SWIFTFLAGS: '--sdk $(SDKROOT)'
      SWIFTTESTFLAGS: '-Xswiftc -I -Xswiftc $(XCTEST_DIR)\usr\lib\swift\windows\x86_64 -Xswiftc -L -Xswiftc $(XCTEST_DIR)\usr\lib\swift\windows -Xswiftc -sdk -Xswiftc $(SDKROOT)'
    steps:
    - task: BatchScript@1
      inputs:
        filename: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/Common7/Tools/VsDevCmd.bat
        arguments: -no_logo -arch=x64 -host_arch=x64
        modifyEnvironment: true
      displayName: 'vsvarsall.bat'
    - pwsh: Invoke-WebRequest -Uri https://swift.org/builds/swift-$(SWIFT_VERSION)-release/windows10/swift-$(SWIFT_VERSION)-RELEASE/swift-$(SWIFT_VERSION)-RELEASE-windows10.exe -OutFile swift-install.exe
      displayName: 'Download Swift'
    - task: BatchScript@1
      inputs:
        filename: .\swift-install.exe
        arguments: /install /quiet
        modifyEnvironment: true
      displayName: 'Install Swift'
    - script: |
        copy %SDKROOT%\usr\share\ucrt.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap"
        copy %SDKROOT%\usr\share\visualc.modulemap "%VCToolsInstallDir%\include\module.modulemap"
        copy %SDKROOT%\usr\share\visualc.apinotes "%VCToolsInstallDir%\include\visualc.apinotes"
        copy %SDKROOT%\usr\share\winsdk.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap"
      displayName: 'Configure SDK'
    - script: |
        set PATH=C:\Library\Developer\Toolchains\unknown-Asserts-development.xctoolchain\usr\bin;C:\Library\Swift-development\bin;C:\Library\icu-67\usr\bin;%PATH%
        swift.exe --version
        swift.exe build %SWIFTFLAGS%
        swift.exe build -c release %SWIFTFLAGS%
      displayName: 'Build SPM Debug & Release'
- stage: deploy
  displayName: Deploy
  dependsOn: test
  # Deploy on tags only; test tags are excluded in trigger section.
  condition: and(not(eq(variables['Build.Reason'], 'PullRequest')), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
  jobs:
  - job: ghPages
    displayName: 'Publish API docs to GH Pages'
    pool:
      vmImage: 'macOS-10.15'
    variables:
      DEVELOPER_DIR: '/Applications/Xcode_12.4.app'
    steps:
    - script: |
        set -e -o xtrace
        brew update
        brew install sourcekitten
        gem install -N jazzy
      displayName: 'Install Tools'
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: '$(swcPubDeployKey)'
        sshKeySecureFile: 'swc_deploy_key'
      displayName: 'Install an SSH key'
    - script: git worktree add docs gh-pages
      displayName: 'Prepare Worktree'
    - script: ./utils.py ci before-deploy
      displayName: 'Before Deploy'
    - script: |
        set -e -o xtrace
        git config --local user.name "Azure Pipelines"
        git config --local user.email "azuredevops@microsoft.com"
        cd docs
        git add --all
        git commit -m "Deploy to GH Pages [skip ci]" --amend
        cd ..
        git remote set-url --push origin git@github.com:tsolomko/SWCompression.git
        git push --force origin gh-pages:gh-pages
      displayName: 'Deploy to GH Pages'
